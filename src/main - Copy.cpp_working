#include <Arduino.h>

/*
 * ESP8266 (Adafruit HUZZAH) Mosquitto MQTT Publish Example
 * Thomas Varnish (https://github.com/tvarnish), (https://www.instructables.com/member/Tango172)
 * Made as part of my MQTT Instructable - "How to use MQTT with the Raspberry Pi and ESP8266"
 */
#include <ESP8266WiFi.h> // Enables the ESP8266 to connect to the local network (via WiFi)
#include <PubSubClient.h> // Allows us to connect to, and publish to the MQTT broker
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <ArduinoJson.h>

//LED
#define LED_NODEMCU D0 //NodeMCU LED
#define BLNKRTOK 1000 // Blink rate for OK operations = 1sec
#define BLNKRTNOK 200 // Blink rate for Not-OK operations = .2sec
int blinkPeriod;
long lastBlinkMillis;
boolean ledState;

// DHT
//type of sensor in use:
#define DHTTYPE    DHT22     // DHT 22 (AM2302)
#define DHTPIN     D1     // Digital pin GPIO5 connected to the DHT sensor

// Generally, you should use "unsigned long" for variables that hold time
// The value will quickly become too large for an int to store
unsigned long previousMillis = 0;    // will store last time DHT was updated

// Updates DHT readings every 10 seconds
const long interval = 10000;
DHT dht(DHTPIN, DHTTYPE);

// current temperature & humidity, updated in loop()
float t = 0.0;
float h = 0.0;

// WiFi
// Make sure to update this for your own WiFi network!
const char* ssid = "Doppler2";
const char* wifi_password = "23345chicoryroad";

// MQTT
// Make sure to update this for your own MQTT Broker!
const char* mqtt_server = "192.168.1.32";
const char* mqtt_username = "devops23345";
const char* mqtt_password = "chicory";

// The client id identifies the ESP8266 device.
String clientID = "ESP8266#1-";

// MQTT Topics - Publish
const char* mqtt_topic = "sensors/temp_humidity/location/office";
const char* mqtt_topic_2 = "MQTT_publishers/device_id";

// MQTT Topics - Subscribe
const char* mqtt_sub_topic_1 = "general/#";
const char* mqtt_sub_topic_2 = "MQTT_publishers/#";

// MQTT JSON objects



// Initialise the WiFi and MQTT Client objects
WiFiClient wifiClient;
PubSubClient client(mqtt_server, 1883, wifiClient); // 1883 is the listener port for the Broker
#define MSG_BUFFER_SIZE	(50)
char msg[MSG_BUFFER_SIZE];
long lastReconnectAttempt = 0;


void setup_LED(){
  //LED setup
  pinMode(LED_BUILTIN, OUTPUT);//ESP-12E LED
  pinMode(LED_NODEMCU, OUTPUT);//ESP8266 LED
  blinkPeriod = BLNKRTOK;

  // Switch the on-board LED HIGH to start with
  digitalWrite(LED_BUILTIN, HIGH);
  digitalWrite(LED_NODEMCU, LOW);//inverted
}


void toggle_LED(){
    ledState = !ledState;
    digitalWrite(LED_BUILTIN, ledState);
}


void setup_wifi(){

  Serial.print("Connecting to ");
  Serial.println(ssid);

  // Connect to the WiFi
  WiFi.begin(ssid, wifi_password);

  // Wait until the connection has been confirmed before continuing
  while (WiFi.status() != WL_CONNECTED) {
    toggle_LED();
    delay(500);
    Serial.print(".");
  }

  // Debugging - Output the IP Address of the ESP8266
  Serial.println("WiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}


void callback_mqtt(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i=0;i<length;i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
  // handle message arrived
}

boolean setup_mqtt_subscriptions(){
 //Handle subscriptions
  boolean result = false;

  if (client.subscribe(mqtt_sub_topic_2)) {
      Serial.print("MQTT Topic Subscribed: ");
      Serial.print(mqtt_sub_topic_2);
      Serial.println("");
      result = true;
  }
  else
  {
      Serial.println("Not Subscribed");
      result = false;
  }

  if (client.subscribe(mqtt_sub_topic_1)) {
      Serial.print("MQTT Topic Subscribed: ");
      Serial.print(mqtt_sub_topic_1);
      Serial.println("");
      result = true;
  }
  else
  {
      Serial.println("Not Subscribed");
      result = false;
  }
  return result;
}

boolean setup_mqtt(){
  // Connect to MQTT Broker
  // client.connect returns a boolean value to let us know if the connection was successful.
  // If the connection is failing, make sure you are using the correct MQTT Username and Password (Setup Earlier in the Instructable)
  Serial.print("Connecting to MQTT Broker @ ");
  Serial.println(mqtt_server);
  // Create a random client ID
   clientID += String(random(0xff), HEX);

  //Wait while trying to connect with broker
  while (!client.connect(clientID.c_str(), mqtt_username, mqtt_password)) {
    toggle_LED();
    delay(500);
    Serial.print(".");
  }
  client.setCallback(callback_mqtt);
  client.publish(mqtt_topic_2, "ESP8266-1");
  Serial.print("MQTT Topic: ");
  Serial.print(mqtt_topic_2);
  Serial.println(F(" ESP8266-1 Client Online"));
  setup_mqtt_subscriptions();

  return true;


/*   else {
    Serial.println(F("Connection to MQTT Broker failed..."));
  }
  return false;
 */
}


boolean reconnect_mqtt() {
  Serial.println(F("Attempting Reconnect...."));
  // Create a random client ID
  clientID += String(random(0xff), HEX);

  //Wait while trying to connect with broker
  while (!client.connect(clientID.c_str(), mqtt_username, mqtt_password)) {
    toggle_LED();
    delay(500);
    Serial.print(".");
  }
  //this will reconnect and resubscribe to topics
  if (client.connected()) {
    // Once connected, publish an announcement...
    client.publish(mqtt_topic_2, "ESP8266-1");
    Serial.println(F("Reconnected...."));

    // ... and resubscribe
    //setup_mqtt_subscriptions();
  }
  return client.connected();
}


void setup() {
  // Start serial comm first as other setups will print to the serial port
  // Begin Serial on 115200
  // Remember to choose the correct Baudrate on the Serial monitor!
  // This is just for debugging purposes
  Serial.begin(115200);
  delay(2);

  setup_LED();

  //prep the sensor
  dht.begin();

  setup_wifi();

  setup_mqtt();

}


void loop() {
 //currentMillis is used to measure time periods for loops
  unsigned long currentMillis = millis();
  //Serial.print("currentMillis=");
  //Serial.print(currentMillis);
  //Serial.println("");

  //LED
  // blink LED
  if (currentMillis - lastBlinkMillis > blinkPeriod)
  {
    toggle_LED();
    lastBlinkMillis = currentMillis;
  }


  // WiFi
  // Check status.  Reconnect if needed.
  // This is a blocking call
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("Reconnect Wifi::");
    setup_wifi();
  }

  // MQTT
  int cState = client.state();

  int cConnect = client.connected();
/*   Serial.print(cConnect);
  Serial.println("");
  Serial.print("Client State=");
  Serial.print(cState);
  Serial.println(""); */

  // Reconnect broker if required
  if (!client.connected()) {
    digitalWrite(LED_NODEMCU, LOW);//Turn on LED to indicate problem
    // Serial.print("lastReconnectAttempt=");
    // Serial.print(lastReconnectAttempt);
    // Serial.println("");
    if (currentMillis - lastReconnectAttempt > 5000) {
      lastReconnectAttempt = currentMillis;
      // Attempt to reconnect
      if (reconnect_mqtt()) {
        // lastReconnectAttempt = 0;
      }
    }
  } else {//connected

    digitalWrite(LED_NODEMCU, HIGH);//Turn OFF LED to indicate OK

    // DHT
    // read temp & humidity
    if (currentMillis - previousMillis >= interval) {
      // save the last time you updated the DHT values
      previousMillis = currentMillis;

      // Read temperature as Celsius (the default)
      //float newT = dht.readTemperature();
      // Read temperature as Fahrenheit (isFahrenheit = true)
      float newT = dht.readTemperature(true);
      // if temperature read failed, don't change t value
      if (isnan(newT)) {
        Serial.println(F("Failed to read from DHT sensor!"));
        blinkPeriod = BLNKRTNOK;
      }
      else {
        t = newT;
        Serial.println(t);
        blinkPeriod = BLNKRTOK;
      }

      // Read Humidity
      float newH = dht.readHumidity();
      // if humidity read failed, don't change h value
      if (isnan(newH)) {
        Serial.println(F("Failed to read from DHT sensor!"));
        blinkPeriod = BLNKRTNOK;
      }
      else {
        h = newH;
        Serial.println(h);
        blinkPeriod = BLNKRTOK;
      }

      client.loop();

      snprintf(msg, MSG_BUFFER_SIZE, "Temp =  %3.1f Humidity = %3.1f", t, h);

      Serial.print("Publish message: ");
      Serial.print("MQTT Topic: ");
      Serial.println(mqtt_topic);
      Serial.println(msg);

      // Publish the data to the broker
      if (client.publish(mqtt_topic, msg)) {
          Serial.println("Data Published");
      }
      // Again, client.publish will return a boolean value depending on whether it succeded or not.
      // If the message failed to send, we will try again, as the connection may have broken.
      else {
        Serial.println(F("Message failed to send."));
      }

      // Client connected.  Run loop to check for incoming
      client.loop();
    }
  }
}
